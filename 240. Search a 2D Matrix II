/*
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
For example,

Consider the following matrix:

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.

Given target = 20, return false.

*/

public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0 ){
            return false;
        }
        return helper(matrix, target, 0, matrix.length-1, 0, matrix[0].length-1);
    }
    public boolean helper(int[][] matrix, int target, int startRow, int endRow, int startCol, int endCol){
        if(startRow > endRow){
            return false;
        }
        if(startCol>endCol){
            return false;
        }
        int colMid = startCol+ (endCol - startCol)/2;
        int rowMid = startRow + (endRow - startRow)/2;
        
        if(matrix[rowMid][colMid] == target){
            return true;
        }
        if(matrix[rowMid][colMid] > target){
            return helper(matrix, target, startRow, rowMid-1, startCol, endCol) || helper(matrix, target, rowMid, endRow, startCol, colMid-1);
        } else {
            return helper(matrix, target, startRow, rowMid, colMid+1, endCol) || helper(matrix, target, rowMid+1, endRow, startCol, endCol);

        }
    }
}
