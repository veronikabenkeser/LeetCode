/*
Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.

Example 1:

Given nums = [1, -1, 5, -2, 3], k = 3,
return 4. (because the subarray [1, -1, 5, -2] sums to 3 and is the longest)

Example 2:

Given nums = [-2, -1, 2, 1], k = 1,
return 2. (because the subarray [-1, 2] sums to 1 and is the longest)

Follow Up:
Can you do it in O(n) time? 
*/

{
    public int maxSubArrayLen(int[] nums, int k) {
        int max = 0;
        int currMax=0;
        HashMap<Integer, Integer> hm = new HashMap<>();
        int prevSum=0;
        
        for(int i=0; i<nums.length; i++){
            int currN = nums[i];
            int sumUpToThisPoint = currN+prevSum;
            if(sumUpToThisPoint == k){
                currMax = i+1;
            } else {
                 int diff = sumUpToThisPoint-k;
                 if(hm.containsKey(diff)){
                     int index = hm.get(diff);
                     currMax=i-index;
                 }
            }
            if(currMax>max){
                max=currMax;
            }
            if(!hm.containsKey(sumUpToThisPoint)){
                hm.put(sumUpToThisPoint, i);
            }
            currMax = 0;
            prevSum = sumUpToThisPoint;
        }
        return max;
    }
}
