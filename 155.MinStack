/*
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
*/
public class MinStack {
    private  Stack<Integer> s;
    private Stack<Integer> min;
    /** initialize your data structure here. */
    public MinStack() {
        s = new Stack<>();
        min = new Stack<>();
    }
    
    public void push(int x) {
        s.push(x);
        if(!min.isEmpty()){
            if(x<=min.peek()){
                min.push(x);
            }
        } else {
             min.push(x);
        }
    }
    
    public void pop() {
        if(!s.isEmpty()){
            int elem = s.pop();
            if(elem == min.peek()){
                min.pop();
            }
        }
    }
    
    public int top() {
        if(!s.isEmpty()){
            int elem = s.peek();
            return elem;
        }
        return -1;
    }
    
    public int getMin() {
        if(!min.isEmpty()){
            return min.peek(); 
        }
        return -1;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
