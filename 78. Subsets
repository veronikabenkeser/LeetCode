/*
Given a set of distinct integers, nums, return all possible subsets.

Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
*/
public class Solution {
    //Solution 1 
    //prints the results in the following format: {},{1},{2},{3}, {1,2}, {1,3}, {2,3}, {1,2,3}
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>>  res = new ArrayList<>();
        for(int i=0; i<=nums.length; i++){
            getPerms(nums, 0, i, res, new ArrayList<Integer>());
        }
        return res;
    }
    
    public void getPerms(int[] nums, int index, int maxLen, List<List<Integer>> l, List<Integer> temp){
        if(temp.size() == maxLen){
            l.add(new ArrayList<>(temp));
            return;
        }
        
        if(index==nums.length){
            return;
        }
        
        temp.add(nums[index]);
        getPerms(nums, index+1, maxLen, l, temp);
        temp.remove(temp.size()-1);
        getPerms(nums, index+1, maxLen, l, temp);
    }
    
    //Solution 2
    public List<List<Integer>> subsets2(int[] nums) {
        List<List<Integer>>  res = new ArrayList<>();
        getPerms(nums, 0, res, new ArrayList<Integer>());
        return res;
    }
    public void getPerms(int[] nums, int index, List<List<Integer>> l, List<Integer> temp){
        //take or don't take
        if(index == nums.length){
            l.add(new ArrayList<>(temp));
            return;
        }
        temp.add(nums[index]);
        getPerms(nums, index+1, l, temp);
        temp.remove(temp.size()-1);
        getPerms(nums, index+1, l, temp);
    }
    
    //Solution 3
    public List<List<Integer>> subsets3(int[] nums) {
        List<List<Integer>>  res = new ArrayList<>();
        int max = (int)Math.pow(2, nums.length);
        
        for(int i=0; i<max; i++){
            List<Integer> sublist = new ArrayList<>();
            int currNum = i;
            int mask = 1;
            int count =0 ;
            
            while(currNum != 0){
                if((mask & currNum) == 1){
                    sublist.add(nums[count]);
                }
                currNum >>= 1;
                count++;
            }
            res.add(sublist);
        }
        
        return res;
    }
}
