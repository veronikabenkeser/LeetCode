/*
 There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.

Note:
All costs are positive integers.

Follow up:
Could you solve it in O(nk) runtime?
*/

public class Solution {
    
    public int minCostII(int[][] costs) {
        if(costs.length==0){
            return 0;
        }
        if(costs[0].length==0){
            return Integer.MAX_VALUE;
        }
        int firstMin=Integer.MAX_VALUE;
        int secondMin=Integer.MAX_VALUE;
        int color=0;
        
        for(int col=0; col<costs[0].length; col++){
             if(costs[0][col]<firstMin){
                         secondMin=firstMin;
                         firstMin=costs[0][col];
                         color=col;
            } else if(costs[0][col]<secondMin){
                         secondMin=costs[0][col];
            }
        }
        
           for(int row=1; row<costs.length; row++){
                 int resUsingColork= secondMin+costs[row][color];
                
                 
                 int tempColor=0;
                 int tempFirstMin=Integer.MAX_VALUE;
                 int tempSecondMin=Integer.MAX_VALUE;
                 
                 for(int col=0; col<costs[0].length; col++){
                     if(col != color && (firstMin+ costs[row][col])<tempFirstMin){
                         tempSecondMin=tempFirstMin;
                         tempFirstMin=firstMin+costs[row][col];
                         tempColor=col;
                     } else if(col != color && (firstMin+ costs[row][col])<tempSecondMin){
                         tempSecondMin=firstMin+costs[row][col];
                     }
                 }
                 
                 if(resUsingColork<tempFirstMin){
                     firstMin=resUsingColork;
                     secondMin=tempFirstMin;
                 } else if(resUsingColork<tempSecondMin){
                     firstMin=tempFirstMin;
                     color = tempColor;
                     secondMin=resUsingColork;
                 } else {
                     firstMin=tempFirstMin;
                     secondMin=tempSecondMin;
                     color = tempColor;
                 }
           }
           return firstMin;
    }
}
