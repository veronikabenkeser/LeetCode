/*
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Therefore, return the max sliding window as [3,3,5,5,6,7].

Note: 
You may assume k is always valid, ie: 1 ≤ k ≤ input array's size for non-empty array.

Follow up:
Could you solve it in linear time?
*/

public class Solution {
    public int[] maxSlidingWindow(int[] arr, int k) {
        if(arr == null || arr.length == 0){
            return new int[]{};
        }
        int[] b = new int[arr.length-k+1];
        Deque <Integer> d  = new LinkedList<>();
        int bIndex=0;
        for(int i=0; i<arr.length; i++){
            //if the number on the left is not in the same window, it's no longer relevant -- delete it
            if(!d.isEmpty() && !inSameWindow(d.peekFirst(),i, k)){
                d.pollFirst();
            }
            //we now know we're looking in the same window
            //if found something bigger than previously found element, delete everything in the dequeue because it's no longer relevant
            while (!d.isEmpty() && arr[i] >= arr[d.peekLast()]){
                     d.pollLast();
            } 
            d.add(i);
     
            //record the max number out of the window of 3 items
            if (i+1 >= k){
               b[bIndex++]=arr[d.peekFirst()];
           }
         }
         return b;
      }

    public static boolean inSameWindow(int i, int j, int k){
         return (i+k) > j;
    }
}
