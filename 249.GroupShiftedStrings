/*
Given a string, we can "shift" each of its letter to its successive letter, for example: "abc" -> "bcd". We can keep "shifting" which forms the sequence:

"abc" -> "bcd" -> ... -> "xyz"

Given a list of strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.

For example, given: ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"],
A solution is:

[
  ["abc","bcd","xyz"],
  ["az","ba"],
  ["acef"],
  ["a","z"]
]
*/

public class Solution {
    public List<List<String>> groupStrings(String[] strings) {
        List<List<String>> l = new ArrayList<>();
        
        if(strings == null || strings.length==0){
            return l;
        }
        
        HashMap<String, List<String>> hm = new HashMap<>();
        for(String s: strings){
            String code = getCode(s);
            if(hm.containsKey(code)){
                hm.get(code).add(s);
            } else {
                List<String> subL = new ArrayList<>();
                subL.add(s);
                hm.put(code, subL);
            }
        }
        
        for(List<String> strList: hm.values()){
            l.add(strList);
        }
        return l;
    }
    
    public String getCode(String s){
        
        //"az"
        //z-a=(25+26) %26 = 25
        //"ba"
        //a-b=-1
        //-1 +26 letters =25%26 = 25.
        
        //abc
        // b-a = 1
        // 1+ 26 letters = 27 %26 = 1 --> 10
        //c-b = 1
        // -->11
        
        char[] arr =s.toCharArray();  
        StringBuilder sb = new StringBuilder();
        for(int i=1; i<arr.length; i++){
            sb.append(((arr[i] - arr[i-1])+26)%26);  
        }
        return sb.toString();
    }
}
