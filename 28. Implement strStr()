/*
 Implement strStr().

Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack. 
*/

public class Solution {
    public int strStr(String haystack, String needle) {
        char[] pattern = needle.toCharArray();
        char[] text = haystack.toCharArray();
        if(text.length == 0 && pattern.length == 0){
            return 0;
        }
        if(pattern.length>text.length || text.length == 0){
            return -1;
        }
        if(pattern.length == 0){
            return 0;
        }
        int[] lps = generateLPS(pattern);
        int i=0, patternIndex =0;
        while(i< text.length){
            if(text[i] == pattern[patternIndex]){
                i++;
                patternIndex++;
                if(patternIndex == pattern.length){
                    return i-patternIndex;
                }
            } else {
                if(patternIndex>0){
                    patternIndex = lps[patternIndex - 1]; //mismatch, so decrease the boarder and start matching pattern index at lps of that boarder
                } else {
                    i++;
                }
            }
        }
        return -1;
    }
    public int[] generateLPS(char[] arr){
        int[] newArr = new int[arr.length];
        int i=1, lps=0;
        while(i < arr.length){
            if(arr[i] == arr[lps]){
                newArr[i] = lps+1;
                lps +=1;
                i++;
            } else {
                if(lps == 0){
                    newArr[i]=0;
                    i++;
                } else {
                    lps = newArr [lps-1];
                }
            }
        }
        return newArr;
    }
}
