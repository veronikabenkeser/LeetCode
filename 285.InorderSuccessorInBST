/*
Given a binary search tree and a node in it, find the in-order successor of that node in the BST.

Note: If the given node has no in-order successor in the tree, return null.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        
        if(root == null){
            return null;
        }
        
        if(root.val == p.val){
            if(root.right != null){
                return getLeftMost(root.right);
            } else {
                return null;
            }
        }
        TreeNode successor =null;
        
        if(root.val > p.val){
            //go left
            successor =  inorderSuccessor(root.left, p);
        } else {
            //go right
            successor =  inorderSuccessor(root.right, p);
        }
        if(successor == null){
            //go up the tree
            if(root.val > p.val){
                return root;
            }
        }
        return successor;
    }
    
    public TreeNode getLeftMost(TreeNode root){
        if(root.left == null){
            return root;
        }
        return getLeftMost(root.left);
    }
}
