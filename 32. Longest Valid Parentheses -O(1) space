/*
Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

For "(()", the longest valid parentheses substring is "()", which has length = 2.

Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.
*/
public class Solution {
    public int longestValidParentheses(String s) {
        int len=0;
        int currCount=0;
        int start=0;
        for(int i=0; i<s.length(); i++){
            if(s.charAt(i) ==')'){
                currCount--;
            } else if(s.charAt(i) =='('){
                currCount++;
            }
            if(currCount == 0){
                len = Math.max(i-start+1, len);
            } else if(currCount<0){
                start =i+1;
                currCount=0;
            }
        }
        currCount=0;
        start = s.length()-1;
        for(int i = s.length()-1; i>=0; i--){
             if(s.charAt(i) ==')'){
                currCount++;
            } else if(s.charAt(i) =='('){
                currCount--;
            }
             if(currCount == 0){
                len = Math.max(start-i+1, len);
            } else if(currCount<0){
                start =i-1;
                currCount=0;
            }
        }
        return len;
    }
}
